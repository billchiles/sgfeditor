

Files:
    sgfpy -> imports game, imports sgfparser to call parse_file, imports Adornments, 
             and has functions that take Moves or refers to game.board for size, etc.
		      It is primarily the UI.
    game -> imports goboard and sgfparser, refers to main_win from game constructor,
            and has write_game to map game/goboard model to parsed/file model.
		     It is in a sense the controller.
    goboard -> knows about parsed model for mapping coordinates from goboard.py model to file model
               It is just model, with one or two cookie properties for the UI or game to use.
    sgfparser -> parses games and produces strings for writing parsed games back to file


pycode todo
 *** This is way out of date :-)
 *** changeset refs are to mercurial sources (not on codeplex), but the changes to the sgfed dir
     under git on codeplex have the same diffs
 * last port back of bug fixes was changeset:   75:5555f6facde9, 11 NOV
 * throw out old tree view and port code from C# project (drawing, jumping, node highlighting, ...)
 * remove throw when SZ missing, default to 19
 * bug in saving empty board games (changeset:   82:267a3b8694bf)
 * bug in parser not storing prev ptrs correctly for nodes in branches (changeset:   83:e85d29911493)
 * bug in collecting dead stones (changeset:   84:34575a7ff8c3, 86:10e27102185b)
 * show help abstraction (changeset 88)
 * gotolast update title (changeset 90)
 * fix to parsednode handling when pasting, parsedgame too in writegame/parsedgamefromgame (changeset 94)
 * title bar between cmd buttons and comment box (changeset 95)
 * another writegame/treeview model bug (changeset 96)
 * cut/paste bugs with captured stones (changeset 96)
 * updating title for cut/paste move, fix pastemove to not paste cut move that conflicts with a stone
   on the board, moving branches marks the game dirty and updates the title, writegame updates title
   now without passing filebase, fixed bug in getpathtomove for parsednodes (need to use moveNum, not
   explicit zero for first node), have title including dirty status now, open and new game now update
   title, made triangles and squares bigger (changeset 97)
 * did not port auto saving to wpf
 * do not do file activation association on wpf
 * do not have scrolling help dialog
 * do not have game metadata editing dialog
 * do not have canonicalized newline sequences in comments
 * do not have esc saving comment and updating title if dirty
 * do not have tree drawing tweaks for bigger nodes or bringing nodes into view better
 * do not have next branch node highlighting
 * do not have prisoner counting
 * do not have handicap stone placement tweak (broke when added code review updates)
 * do not have simplified UpdateTitle code
 *




C# port path:
 * just drew grid and main ui
 * click to draw stone and alternate colors
 * click to draw stone and detect conflict locations
 * click stones with current move adornment working
 * forw/rev moves
 * home/end game
 * branching
 * branch combo selection change handling
 * check for dead stones and restore on rewind
 * do lots of renaming to fix up method_names
 * input handling (comments, focus, arrows, etc.)
 * comments
 * add handicap stones
 * adornments input events
 * start new game
 * write files
 * write reverse file
 * save game
 * public fields to props, decide public/internal statics, fix members public/internal
 *
 * REMAINING WORK ...
 * clean up comments and pythonic names


