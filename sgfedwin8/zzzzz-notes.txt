
TO DO ...

 * pattern match ko and forbid ko take back
 * formalize exceptions, handle them up in the UI layer, keep program running
 * handle MA property for X marks
 * handle bogus empty nodes that some older game records have sometimes for branches and whatnot
 * add numeric labeling annotations
 * auto number moves on board from their move number (less useful until add printing, but could screenshot)


Want to add unit tests, then refactor parsenodes out of model, just use them to read files and
immediately convert to moves.  There were an incremental development aid that I kept around as a
premature optimization, but they aren't necessary as an optimization and complicate the code in the
model.

When adding a move, we just invalidate the game tree and redraw it.  Turns out this is really fast.
If one day need to handle many hundreds of nodes, can consider optimizing for prev move not having
branches and there being no tree node to the right in the tree node grid, then just add tree node.
However, highly likely in such a file, you're just browsing some joseki dictionary or whatnot.


RELEASE NOTES ...

21 NOV 15 pushed to store, but these notes include FEB 2015 release too for lifein19x19 post:

 * fixed keyboard input issue with focus in the comment box and some keys getting handled globally
 * added ctrl-t to convert index references to the current move to "this" for easier reading
 * now gracefully handle if user deletes open file and then tries to save game later
 * changed file name and game state feedback for easier viewing
 * updated help text
 * FEB 2015 released features above here
 * now support multiple open files and switching between them
 * ctrl-leftarrow now moves back in game history to closest node that has branches
 * some minor bug fixes
 * better recovering from encountering bad nodes parsed from file and reporting issue to user
 * work around windows 10 backward compatibility bug that was causing app to crash on win10


On 02 SEP 14 posted to lifein19x19.com:
 * pushed release to store
 * a few bug fixes
 * support AW and AB on the initial board state
 * added few comment editing features, such as saving comment to clipboard as sort of an undo
 * added a few tweaks to the tree view to make some things more visible


... Forgot to update these for a few releases ...

On 07 JUL 13 posted on lifein19x19.com
Since store v1.05 (store calls it release 4, submitted 28 MAY 13)
 * added support for AW property in initial board state
 * generalized handling of AB to support no HA
 * checked in pkg store assoc and store key files (Microsoft expects these to be checked in publicly)
 * fixed race condition when launching from file activation and unnamed auto save check crashed
 * fixed bug in AB handling with no HA property, was setting next color to black instead of white
 * added text to game info dialog explaining to use New Game command to set handicap
 * added and fixed comments
 *

Since store v1.04 (store calls it release 3, submitted 20 APR 13)
 * fixed bug where you could launch and c-o before unnamed auto save kicked in, dialog race (27 MAY 13)
 * checked in app manifest file with version frob for release 4


Since store v 1.03 (store calls it release 2, submitted 04 APR 13), 
 * checked in app manifest file used in prev release
 * finished cleaning up UpdateTitle so no calls pass args
 * ported lots from win8 to wpf version 27e92681a76c 07 APR 13
 * fixed bug in new dlg and game info dlg where enter/esc didn't work, and mainwin handled kbd input
 * enhanced highlighting of current node in tree view
 * fixed bug in writing flipped view files
 * notes.txt cleanups
 * added c-i for Game Info dialog to wpf version, flipped file bug fix, checks for new game dlg
 * app manifest and proj file changes for store release 3


Since store v1, b35b1502515c, 9:51 p.m. 25 MAR 2013:
 * tap last move to undo misclick
 * fixed home key and tapping start node to restore empty board adornments
 * reworked command panel, putting some stuff in app bar
 * green highlights on game tree nodes with comments
 * comment cleanups
 from lifein19x19.com post ...
 * cleaned up and simplified UpdateTitle
 * fixed bug in new dlg and game info dlg where enter/esc didn't work, and mainwin still handled kbd input
 * enhanced highlighting of current node in tree view
 * fixed bug in writing flipped view files
 * ported to C# WPF version: esc saves comment and updates title if dirty
 * ported to C# WPF version: canonicalized newline sequences in comments 
 * ported to C# WPF version: tolerating HA0 when parsing
 * ported to C# WPF version: tree drawing tweaks for constants on node size
 * ported to C# WPF version: simplified UpdateTitle code
 * ported to C# WPF version: handicap stone placement tweak (broke when added code review updates)
 * ported to C# WPF version: tap last move to undo misclick
 * ported to C# WPF version: fixed home key and tapping start node to restore empty board adornments
 * ported to C# WPF version: green highlights on game tree nodes with comments
 * ported to C# WPF version: game metadata editing dialog


Since 23 FEB Alpha 2 release:
 * uncommented selection changed event handler for branches combo box
 * forgot to make tree draw all the time when activated by file double click
 * added next branch highlighting to tree view
 * added crude prisoner counting and reporting in title bar
 * tweaked size of tree graph nodes
 * added combo in command panel to select what click means on the board (more touch enabled)
 * commented out app bar buttons for setting what clicking on the board does.
 * auto save on suspend and on 30s timer
 * game info dialog for editing game metadata
 * made file parsing tolerant of supplying a handicap of zero
 * made file parsing canonicalize newline endings in comments
 * fixed handicap stone placement bug introduced from DEC code review updates
 * cleaned up and simplified UpdateTitle code and fixed bug
 * fixed esc to check if comment text dirty
 * improved tree update code to move nodes into view better
 

Since the last release, 26 JAN, I've:
 * cleaned up several little things in the code/comments
 * disbling UI while parsing file on open command and displaying game
 * added "title" bar under command buttons to see file name and current move number
 * fixed letter adornments to have background so that board lines do not go through the letters
 * set preferred launch of win8 version to be landscape
 * removed some old python files never meant to be checked in
 * implemented jumping to a move by clicking on game tree
 * fixed current game tree node highlighting
 * fixed bug where end key and end button didn't behave the same
 * fixed bug in gotolastmove so that it calls UpdateTitle
 * fixed game tree drawing bug
 * removed some uses of 'dynamic'
 * added letters and numerals to board display for referencing intersections
 * implemented win8 snapped view (requirement of store compliance)
 * fixed bug in python version
 * game tree no fully works with Move and ParsedNode (rendered moves and moves just parsed)
 * added scrollable help dialog since win8 msgbox doesn't handle help string
 * implemented my own debug.assert due to win8 bug
 * added size change handler to board to keep it square on win8 devices
 * fixed writegame to set filename and not deref null in some cases
 * fixed branch combo label alignment with stackpanel
 * tweaked buttons margins to make cmd panel more appealing,
      don't know why disabled buttons have no bottom border
 * fixed jumping in game tree to save comments, restore destination move comments
 * added some margin padding to right board index labels so the feel less squished
 * fixed writegame to test for letter adornments grid hack workaround for win8 background
 * fixed writegame/parsedgamefromgame to store new parsedgame since we re-use parsednodes
 * fixed parsednode handling in pasting moves
 * centered title in title bar
 * fixed bug in UpdateParsedGameFromGame to store branch for root
 * added integrity checking code on tree view and write game structures
 * added lots of stuff to app bar, with some code cleanups
 * moved UpdateParsedGameFromGame to be instance method of Game
 * did a lot of UI fixup, figured out button problems
 * fixed copy/paste error in scrolling tree view
 * added cleaned up icons


 ---- WPF
 * fixed jumping in tree comments preservation
 * fixed parsednode handling in paste
 * fixed parsednode/game handling in writegame/parsedgamefromgame
 * updated notes
 * added title bar under cmd bay, changed UpdateTitle for simpler title there.
 
 

SGF NOTES ...

ID   FF   Description     property type    property value
--  ----  --------------  ---------------  ---------------------------------
*AB  1234  Add Black       setup            list of stone
AP  ---4  Application     root             composed simpletext : simpletext       ;; [CGoban:3]
*AW  1234  Add White       setup            list of stone
*B   1234  Black           move             move
BL  1234  Black time left move             real
BR  1234  Black rank      game-info        simpletext
BT  --34  Black team      game-info        simpletext
*C   1234  Comment         -                text
CA  ---4  Charset         root             simpletext                              ;; [UTF-8]
CP  --34  Copyright       game-info        simpletext
DT  1234  Date            game-info        simpletext
EV  1234  Event           game-info        simpletext
FF  -234  Fileformat      root             number (range: 1-4)
*GC  1234  Game comment    game-info        text
GM  1234  Game            root             number (range: 1-5,7-16)
*HA  1234  Handicap        game-info (Go)   number
*KM  1234  Komi            game-info (Go)   real                                   ;; [0.00]
*LB  --34  Label           -                list of composed point : simpletext    ;; [dd:A] or LB[dd:A][ee:B][ff:C]
MA  --34  Mark with X     -                list of point
*PB  1234  Player Black    game-info        simpletext
PL  1234  Player to play  setup            color                              ;; if switch start color (c-s-left): PL[W]
*PW  1234  Player White    game-info        simpletext
RE  1234  Result          game-info        simpletext
RU  --34  Rules           game-info        simpletext                              ;; [Japanese]
SE  ---4  Markup          - (LOA)          point
*SQ  ---4  Square          -                list of point
ST  ---4  Style           root             number (range: 0-3)                     ;; [2]
*SZ  1234  Size            root             (number | composed number : number)
TM  1234  Timelimit       game-info        real
*TR  --34  Triangle        -                list of point                           ;; [dd] or TR[dd][ee][ff]
*W   1234  White           move             move
WL  1234  White time left move             real
WR  1234  White rank      game-info        simpletext
WT  --34  White team      game-info        simpletext



RANDOM OLD LEARNING NOTES ...

-------------
snapped view
http://rushabh.greenpoison.org.in/blog/2012/09/18/handling-snap-view-and-all-resolutions-in-windows-8/

-------------

Stuff from WPF expert helping me prove win8 bug and hidden scroller control stealing focus.
Finally got Windows team to verify bug, don't know if they fixed it.

Keyboard from WasApp1.MainWindow, source: Windows.UI.Xaml.Controls.TextBox
Setting focus on stones ...
DONE setting focus on stones ...


Lost focus. source: Windows.UI.Xaml.Controls.TextBox, new focus: WasApp1.FocusableInputControl
WasApp1.FocusableInputControl
 => Windows.UI.Xaml.Controls.Grid
 => WasApp1.MainWindow
 => Windows.UI.Xaml.Controls.ContentPresenter
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.Frame
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.ScrollContentPresenter
 => Windows.UI.Xaml.Controls.Grid
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.ScrollViewer
Setting focus on stones ...
DONE setting focus on stones ...


Lost focus. source: WasApp1.FocusableInputControl, new focus: Windows.UI.Xaml.Controls.ScrollViewer
Windows.UI.Xaml.Controls.ScrollViewer




-----------------------------------------------------------------------------
        // writing ...
        //var fp = new FileSavePicker();
        //fp.FileTypeChoices.Add("SGF Files", new[] { ".sgf" });
        //var sf = await fp.PickSaveFileAsync();
        //await FileIO.WriteTextAsync(sf, "Wow, alex rOCKS!\n");

        //// shows UI is active once picker is down, so need to dike out input.
        //await GameAux.Message("15s wait ...");
        //await Task.Delay(TimeSpan.FromSeconds(15));
        //var contents = await FileIO.ReadTextAsync(sf);
        //await GameAux.Message(sf.Name + "..." + contents);

        //// shows can modify file and keep reading storage obj
        ////await Task.Delay(TimeSpan.FromSeconds(30));
        ////contents = await FileIO.ReadTextAsync(sf);
        ////await GameAux.Message(sf.Name + "..." + contents);

        //// shows can read and write from file
        //await FileIO.WriteTextAsync(sf, contents + "ta dah");
        //contents = await FileIO.ReadTextAsync(sf);
        //await GameAux.Message(sf.Name + "..." + contents);

        // First random try ...
        //var s = sf.OpenStreamForReadAsync();
        //var stream = await sf.OpenSequentialReadAsync();


