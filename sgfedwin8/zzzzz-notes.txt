
maybe optimize for prev move not having branches and having no node next to it in the grid
   if do this, then need new treeviewnode in grid, dict, etc.


Things to do before submitting win8 version to store:
 * add appropriate try/catch to UI event handlers, write temp file


Since 23 FEB Alpha 2 release:
 * uncommented selection changed event handler for branches combo box
 * forgot to make tree draw all the time when activated by file double click
 * added next branch highlighting to tree view
 * added crude prisoner counting and reporting in title bar
 * tweaked size of tree graph nodes
 * added combo in command panel to select what click means on the board (more touch enabled)
 * commented out app bar buttons for setting what clicking on the board does.
 * auto save, no timer, just on suspend
 *

Since the last release, 26 JAN, I've:
 * cleaned up several little things in the code/comments
 * disbling UI while parsing file on open command and displaying game
 * added "title" bar under command buttons to see file name and current move number
 * fixed letter adornments to have background so that board lines do not go through the letters
 * set preferred launch of win8 version to be landscape
 * removed some old python files never meant to be checked in
 * implemented jumping to a move by clicking on game tree
 * fixed current game tree node highlighting
 * fixed bug where end key and end button didn't behave the same
 * fixed bug in gotolastmove so that it calls UpdateTitle
 * fixed game tree drawing bug
 * removed some uses of 'dynamic'
 * added letters and numerals to board display for referencing intersections
 * implemented win8 snapped view (requirement of store compliance)
 * fixed bug in python version
 * game tree no fully works with Move and ParsedNode (rendered moves and moves just parsed)
 * added scrollable help dialog since win8 msgbox doesn't handle help string
 * implemented my own debug.assert due to win8 bug
 * added size change handler to board to keep it square on win8 devices
 * fixed writegame to set filename and not deref null in some cases
 * fixed branch combo label alignment with stackpanel
 * tweaked buttons margins to make cmd panel more appealing,
      don't know why disabled buttons have no bottom border
 * fixed jumping in game tree to save comments, restore destination move comments
 * added some margin padding to right board index labels so the feel less squished
 * fixed writegame to test for letter adornments grid hack workaround for win8 background
 * fixed writegame/parsedgamefromgame to store new parsedgame since we re-use parsednodes
 * fixed parsednode handling in pasting moves
 * centered title in title bar
 * fixed bug in UpdateParsedGameFromGame to store branch for root
 * added integrity checking code on tree view and write game structures
 * added lots of stuff to app bar, with some code cleanups
 * moved UpdateParsedGameFromGame to be instance method of Game
 * did a lot of UI fixup, figured out button problems
 * fixed copy/paste error in scrolling tree view
 * added cleaned up icons


 ---- WPF
 * fixed jumping in tree comments preservation
 * fixed parsednode handling in paste
 * fixed parsednode/game handling in writegame/parsedgamefromgame
 * updated notes
 * added title bar under cmd bay, changed UpdateTitle for simpler title there.
 
 
 
-------------

Y/N accelerators for yes/no dlgs

-------------
snapped view
http://rushabh.greenpoison.org.in/blog/2012/09/18/handling-snap-view-and-all-resolutions-in-windows-8/

-------------

Keyboard from WasApp1.MainWindow, source: Windows.UI.Xaml.Controls.TextBox
Setting focus on stones ...
DONE setting focus on stones ...


Lost focus. source: Windows.UI.Xaml.Controls.TextBox, new focus: WasApp1.FocusableInputControl
WasApp1.FocusableInputControl
 => Windows.UI.Xaml.Controls.Grid
 => WasApp1.MainWindow
 => Windows.UI.Xaml.Controls.ContentPresenter
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.Frame
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.ScrollContentPresenter
 => Windows.UI.Xaml.Controls.Grid
 => Windows.UI.Xaml.Controls.Border
 => Windows.UI.Xaml.Controls.ScrollViewer
Setting focus on stones ...
DONE setting focus on stones ...


Lost focus. source: WasApp1.FocusableInputControl, new focus: Windows.UI.Xaml.Controls.ScrollViewer
Windows.UI.Xaml.Controls.ScrollViewer




-----------------------------------------------------------------------------
        // writing ...
        //var fp = new FileSavePicker();
        //fp.FileTypeChoices.Add("SGF Files", new[] { ".sgf" });
        //var sf = await fp.PickSaveFileAsync();
        //await FileIO.WriteTextAsync(sf, "Wow, alex rOCKS!\n");

        //// shows UI is active once picker is down, so need to dike out input.
        //await GameAux.Message("15s wait ...");
        //await Task.Delay(TimeSpan.FromSeconds(15));
        //var contents = await FileIO.ReadTextAsync(sf);
        //await GameAux.Message(sf.Name + "..." + contents);

        //// shows can modify file and keep reading storage obj
        ////await Task.Delay(TimeSpan.FromSeconds(30));
        ////contents = await FileIO.ReadTextAsync(sf);
        ////await GameAux.Message(sf.Name + "..." + contents);

        //// shows can read and write from file
        //await FileIO.WriteTextAsync(sf, contents + "ta dah");
        //contents = await FileIO.ReadTextAsync(sf);
        //await GameAux.Message(sf.Name + "..." + contents);

        // First random try ...
        //var s = sf.OpenStreamForReadAsync();
        //var stream = await sf.OpenSequentialReadAsync();


